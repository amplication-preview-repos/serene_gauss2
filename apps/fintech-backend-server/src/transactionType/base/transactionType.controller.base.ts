/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TransactionTypeService } from "../transactionType.service";
import { TransactionTypeCreateInput } from "./TransactionTypeCreateInput";
import { TransactionType } from "./TransactionType";
import { TransactionTypeFindManyArgs } from "./TransactionTypeFindManyArgs";
import { TransactionTypeWhereUniqueInput } from "./TransactionTypeWhereUniqueInput";
import { TransactionTypeUpdateInput } from "./TransactionTypeUpdateInput";

export class TransactionTypeControllerBase {
  constructor(protected readonly service: TransactionTypeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TransactionType })
  async createTransactionType(
    @common.Body() data: TransactionTypeCreateInput
  ): Promise<TransactionType> {
    return await this.service.createTransactionType({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TransactionType] })
  @ApiNestedQuery(TransactionTypeFindManyArgs)
  async transactionTypes(
    @common.Req() request: Request
  ): Promise<TransactionType[]> {
    const args = plainToClass(TransactionTypeFindManyArgs, request.query);
    return this.service.transactionTypes({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TransactionType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async transactionType(
    @common.Param() params: TransactionTypeWhereUniqueInput
  ): Promise<TransactionType | null> {
    const result = await this.service.transactionType({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TransactionType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTransactionType(
    @common.Param() params: TransactionTypeWhereUniqueInput,
    @common.Body() data: TransactionTypeUpdateInput
  ): Promise<TransactionType | null> {
    try {
      return await this.service.updateTransactionType({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TransactionType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTransactionType(
    @common.Param() params: TransactionTypeWhereUniqueInput
  ): Promise<TransactionType | null> {
    try {
      return await this.service.deleteTransactionType({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
